// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}
model User {
  id        String   @id @default(uuid()) // Primary Key
  email     String   @unique // Unique email for the user
  password  String @unique // Unique password for the user
  name      String // Name for the user
  animals   Animal[] // One-to-many relationship with animals
  createdAt DateTime @default(now()) // date of creation
  updatedAt DateTime @updatedAt // date of update
  isAdmin  Boolean @default(false) // Admin flag
}

model Animal {
  id        String   @id @default(uuid()) // Primary Key
  tag       String   @unique // Unique identifier for the animal
  breed     String?   // Breed of the animal
  birthDate DateTime? // Date of birth
  ownerId   String?   // Foreign Key for User
  owner     User?     @relation(fields: [ownerId], references: [id], onDelete: Cascade) // One-to-one relationship with user
  events    Event[]  // One-to-many relationship with events
  births    Births[] // One-to-many relationship with births
  heat      HeatService[] // One-to-many relationship with heat services
  createdAt DateTime @default(now()) // date of creation
  updatedAt DateTime @updatedAt // date of update
}

model Event {
  id           String        @id @default(uuid()) // Primary Key for Event
  type         String        // Type of the event: Heat, Birth, Disease
  date         DateTime      // Date of the event
  description  String?       // Description for the event
  animalTag    String        // Foreign Key for Animal 
  animal       Animal?        @relation(fields: [animalTag], references: [tag], onDelete: Cascade) // One-to-one
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  heatServices HeatService[] // One-to-many relationship with heat services
  diseases     Disease[]     // One-to-many relationship with diseases
  births       Births[]       // One-to-many relationship with births
}

enum EventType{
  HEAT
  BIRTH
  DISEASE
}

model HeatService {
  id              String   @id @default(uuid()) // Unique identifier for the record
  eventId         String?   // Reference to the associated event
  detectionDate   DateTime? // Date when heat was detected
  serviceDate     DateTime? // Date of the service (insemination or mating)
  observation     String   // Result: Pending, Pregnant, Failed
  event           Event?    @relation(fields: [eventId], references: [id])
  animalTag       String
  animal          Animal    @relation(fields: [animalTag], references: [tag])
  animalTouch     String?   // Result of the touch
}

model Disease {
  id           String   @id @default(uuid()) // Primary Key
  name         String
  observation  String?
  eventId      String   // Foreign Key for Event
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}
model CommonDisease {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Births {
  id               String   @id @default(uuid()) // Unique identifier for the record
  eventId          String?   // Reference to the associated event
  animalTag        String // Foreign Key for Animal
  birthDate        DateTime // Date of birth
  pups             Int     // Number of offspring born
  observation      String   // Additional notes about the birth
  event            Event?    @relation(fields: [eventId], references: [id])
  animal           Animal    @relation(fields: [animalTag], references: [tag])
}

